ggplot(aes(x = sig, y = value, color = Threshold)) +
geom_smooth() +
theme_bw() +
theme(legend.position = "bottom") +
facet_wrap(~delta) +
labs(x = "Sigma",
y = "")
check <- expand.grid(sig = seq(.1, 7, .1),
delta = seq(.59, .99, .05),
cost = 2.5)
test = <- as.data.table(check)[,(solve_all(sig, delta, cost)), by = .(sig, delta, cost)] %>%
melt.data.table(id.vars = c("sig", "delta", "cost"), variable.name = "Threshold")
test <- as.data.table(check)[,(solve_all(sig, delta, cost)), by = .(sig, delta, cost)] %>%
melt.data.table(id.vars = c("sig", "delta", "cost"), variable.name = "Threshold")
test %>% filter(delta %in% c(.59, .79, .99)) %>%  mutate(delta = as.factor(paste("Delta = ", as.character(delta)))) %>%
ggplot(aes(x = sig, y = value, color = Threshold)) +
geom_smooth() +
theme_bw() +
theme(legend.position = "bottom") +
facet_wrap(~delta) +
labs(x = "Sigma",
y = "")
data %>% filter(delta %in% c(.59, .79, .99)) %>%  mutate(delta = as.factor(paste("Delta = ", as.character(delta)))) %>%
ggplot(aes(x = sig, y = value, color = Threshold)) +
geom_smooth() +
theme_bw() +
theme(legend.position = "bottom") +
facet_wrap(~delta) +
labs(x = "Sigma",
y = "")
test %>% filter(delta %in% c(.59, .79, .99)) %>%  mutate(delta = as.factor(paste("Delta = ", as.character(delta)))) %>%
ggplot(aes(x = sig, y = value, color = Threshold)) +
geom_smooth() +
theme_bw() +
theme(legend.position = "bottom") +
facet_wrap(~delta) +
labs(x = "Sigma",
y = "")
data %>% filter(delta %in% c(.59, .79, .99)) %>%  mutate(delta = as.factor(paste("Delta = ", as.character(delta)))) %>%
ggplot(aes(x = sig, y = value, color = Threshold)) +
geom_smooth() +
theme_bw() +
theme(legend.position = "bottom") +
facet_wrap(~delta) +
labs(x = "Sigma",
y = "")
data %>% filter(delta %in% c(.59, .79, .99)) %>%  mutate(delta = as.factor(paste("Delta = ", as.character(delta)))) %>%
ggplot(aes(x = sig, y = value, color = Threshold)) +
geom_smooth() +
theme_bw() +
theme(legend.position = "bottom") +
facet_wrap(~delta) +
labs(x = "Sigma",
y = "") + ylim(c(0, 20))
seq(.1, 7, .1) %>% length
seq(.1, 7, .1)
seq(.1, 7, .1)[35]
seq(.59, .99, .05) %>% length
seq(1.5, 2.5, .01) %>% length
sig_vary_data <- as.data.table(sig_vary)[,(solve_all(sig, delta, cost)), by = .(sig, delta, cost)] %>%
melt.data.table(id.vars = c("sig", "delta", "cost"), variable.name = "Threshold")
sig_vary <- expand.grid(sig = seq(.1, 7, .1),
delta = .79,
cost = 2)
sig_vary_data <- as.data.table(sig_vary)[,(solve_all(sig, delta, cost)), by = .(sig, delta, cost)] %>%
melt.data.table(id.vars = c("sig", "delta", "cost"), variable.name = "Threshold")
sig_vary_data
delta_vary <- expand.grid(sig = 3.5,
delta = seq(.59, .99, .05),
cost = 2)
cost_vary <- expand.grid(sig = seq(.1, 7, .1),
delta = seq(.59, .99, .05),
cost = seq(1.5, 2.5, .05))
```
```{r model, include = F}
sig_vary_data <- as.data.table(sig_vary)[,(solve_all(sig, delta, cost)), by = .(sig, delta, cost)] %>%
melt.data.table(id.vars = c("sig", "delta", "cost"), variable.name = "Threshold")
delta_vary_data <- as.data.table(delta_vary)[,(solve_all(sig, delta, cost)), by = .(sig, delta, cost)] %>%
melt.data.table(id.vars = c("sig", "delta", "cost"), variable.name = "Threshold")
cost_vary_data <- as.data.table(cost_vary)[,(solve_all(sig, delta, cost)), by = .(sig, delta, cost)] %>%
melt.data.table(id.vars = c("sig", "delta", "cost"), variable.name = "Threshold")
sig_vary_data %>%
mutate(delta = as.factor(paste("Delta = ", as.character(delta)))) %>%
ggplot(aes(x = sig, y = value, color = Threshold)) +
geom_smooth() +
theme_bw() +
theme(legend.position = "bottom") +
facet_wrap(~delta) +
labs(x = "Sigma",
y = "")
sig_vary_data %>%
ggplot(aes(x = sig, y = value, color = Threshold)) +
geom_smooth() +
theme_bw() +
theme(legend.position = "bottom") +
labs(x = "Sigma",
y = "")
data %>%
ggplot(aes(x = delta, y = value, color = Threshold)) +
theme_bw() +
theme(legend.position = "bottom") +
geom_smooth(size = .5) +
labs(x = "Delta",
y = "")
data %>%
ggplot(aes(x = delta, y = value, color = Threshold)) +
theme_bw() +
theme(legend.position = "bottom") +
labs(x = "Delta",
y = "")
source("solve.R")
delta_vary_data %>%
ggplot(aes(x = delta, y = value, color = Threshold)) +
theme_bw() +
theme(legend.position = "bottom") +
labs(x = "Delta",
y = "")
delta_vary_data
delta_vary_data %>% head()
delta_vary_data %>%
ggplot(aes(x = delta, y = value, color = Threshold)) +
theme_bw() +
theme(legend.position = "bottom")
delta_vary_data %>%
ggplot(aes(x = delta, y = value, color = Threshold)) +
theme_bw() +
theme(legend.position = "bottom") +
geom_smooth() +
labs(x = "Delta",
y = "")
cost_vary_data %>%
ggplot(aes(x = cost, y = value, color = Threshold)) +
geom_smooth() +
theme_bw() +
theme(legend.position = "bottom") +
labs(x = "Cost",
y = "")
delta_vary_data %>%
ggplot(aes(x = delta, y = value, color = Threshold)) +
geom_smooth() +
theme_bw() +
theme(legend.position = "bottom") +
labs(x = "Delta",
y = "")
sig_vary_data %>%
ggplot(aes(x = sig, y = value, color = Threshold)) +
geom_smooth() +
theme_bw() +
theme(legend.position = "bottom") +
labs(x = "Sigma",
y = "")
#===========
# standard setup
#===========
root <- getwd()
root
setwd("Github/got_death_bracket")
#===========
# standard setup
#===========
root <- getwd()
# Created by Michael Cahana in early Apr. 2019
#===========
# standard setup
#===========
root <- getwd()
while(basename(root) != "got_death_bracket") {
root <- dirname(root)
}
source(file.path(root, "data.R"))
#===========
# needed libraries
#===========
library(rmarkdown)
#===========
# render markdown file
#===========
render(file.path(root, 'site', 'index.Rmd'),
output_file = file.path(root, 'index.html'))
install.packages('prettydoc')
render(file.path(root, 'site', 'index.Rmd'),
output_file = file.path(root, 'index.html'))
install.packages("plotly")
install.packages("plotly")
# Created by Michael Cahana in early Apr. 2019
#===========
# standard setup
#===========
root <- getwd()
while(basename(root) != "got_death_bracket") {
root <- dirname(root)
}
source(file.path(root, "data.R"))
#===========
# needed libraries
#===========
library(rmarkdown)
#===========
# render markdown file
#===========
render(file.path(root, 'site', 'index.Rmd'),
output_file = file.path(root, 'index.html'))
install.packages('jsonlite')
remove.packages('jsonlite')
devtools::install_github("https://github.com/jeroen/jsonlite.git")
# Created by Michael Cahana in early Apr. 2019
#===========
# standard setup
#===========
root <- getwd()
while(basename(root) != "got_death_bracket") {
root <- dirname(root)
}
source(file.path(root, "data.R"))
#===========
# needed libraries
#===========
library(rmarkdown)
#===========
# render markdown file
#===========
render(file.path(root, 'site', 'index.Rmd'),
output_file = file.path(root, 'index.html'))
install.packages('fontawesome')
devtools::install_github('https://github.com/rstudio/fontawesome.git')
1
render(file.path(root, 'site', 'index.Rmd'),
output_file = file.path(root, 'index.html'))
#===========
# needed libraries
#===========
library(tidyverse)
# Created by Michael Cahana in late Apr. 2019
# Scores GOT bracket predictions according to master bracket
#===========
# inputs:
#===========
# brackets dir
# master.xlsx
#===========
# needed libraries
#===========
library(tidyverse)
library(readxl)
#===========
# standard setup
#===========
root <- getwd()
while(basename(root) != "got_death_bracket") {
root <- dirname(root)
}
source(file.path(root, "data.R"))
#===========
# data read in
#===========
character_outcomes <- read_excel(file.path(dropbox, 'master.xlsx'))
bracket_predictions <-
list.files(brackets, full.names = T) %>%
.[!str_detect(., '~')] %>%
map_df(read_excel) %>%
filter(!is.na(Characters))
bracket_contestants <-
list.files(brackets) %>%
.[!str_detect(., '~')] %>%
str_replace('.xlsx', '') %>%
str_to_title()
#===========
# data reshaping
#===========
character_outcomes <-
character_outcomes %>%
select(Characters:`Episode 6`) %>%
setNames(c('character', 'episode_3', 'episode_4',
'episode_5', 'episode_6')) %>%
gather(episode, outcome, episode_3:episode_6) %>%
mutate(episode = str_extract(episode, '\\d'))
bracket_predictions <-
bracket_predictions %>%
mutate(Characters = if_else(Characters=='Bron', 'Bronn', Characters)) %>%
select(Characters:`Episode 6`) %>%
setNames(c('character', 'episode_3', 'episode_4',
'episode_5', 'episode_6')) %>%
mutate(contestant = rep(bracket_contestants, each=32)) %>%
gather(episode, prediction, episode_3:episode_6) %>%
mutate(episode = str_extract(episode, '\\d'))
#===========
# generate scores
#===========
scores <-
bracket_predictions %>%
left_join(character_outcomes, by = c('character', 'episode')) %>%
filter(!is.na(outcome)) %>%
mutate(points = if_else(prediction==outcome, 1, 0)) %>%
group_by(contestant, episode) %>%
summarize(points = sum(points, na.rm = T)) %>%
mutate(cum_points = cumsum(points))
#===========
# save outout
#===========
write_csv(scores, file.path(results, 'scores.csv'))
# Created by Michael Cahana in late Apr. 2019
# Scores GOT bracket predictions according to master bracket
#===========
# inputs:
#===========
# brackets dir
# master.xlsx
#===========
# needed libraries
#===========
library(tidyverse)
library(readxl)
#===========
# standard setup
#===========
root <- getwd()
while(basename(root) != "got_death_bracket") {
root <- dirname(root)
}
source(file.path(root, "data.R"))
#===========
# data read in
#===========
character_outcomes <- read_excel(file.path(dropbox, 'master.xlsx'))
bracket_predictions <-
list.files(brackets, full.names = T) %>%
.[!str_detect(., '~')] %>%
map_df(read_excel) %>%
filter(!is.na(Characters))
bracket_contestants <-
list.files(brackets) %>%
.[!str_detect(., '~')] %>%
str_replace('.xlsx', '') %>%
str_to_title()
#===========
# data reshaping
#===========
character_outcomes <-
character_outcomes %>%
select(Characters:`Episode 6`) %>%
setNames(c('character', 'episode_3', 'episode_4',
'episode_5', 'episode_6')) %>%
gather(episode, outcome, episode_3:episode_6) %>%
mutate(episode = str_extract(episode, '\\d'))
bracket_predictions <-
bracket_predictions %>%
mutate(Characters = if_else(Characters=='Bron', 'Bronn', Characters)) %>%
select(Characters:`Episode 6`) %>%
setNames(c('character', 'episode_3', 'episode_4',
'episode_5', 'episode_6')) %>%
mutate(contestant = rep(bracket_contestants, each=32)) %>%
gather(episode, prediction, episode_3:episode_6) %>%
mutate(episode = str_extract(episode, '\\d'))
#===========
# generate scores
#===========
scores <-
bracket_predictions %>%
left_join(character_outcomes, by = c('character', 'episode')) %>%
filter(!is.na(outcome)) %>%
mutate(points = if_else(prediction==outcome, 1, 0)) %>%
group_by(contestant, episode) %>%
summarize(points = sum(points, na.rm = T)) %>%
mutate(cum_points = cumsum(points))
#===========
# save outout
#===========
write_csv(scores, file.path(results, 'scores.csv'))
# Created by Michael Cahana in late Apr. 2019
# Scores GOT bracket predictions according to master bracket
#===========
# inputs:
#===========
# brackets dir
# master.xlsx
#===========
# needed libraries
#===========
library(tidyverse)
library(readxl)
#===========
# standard setup
#===========
root <- getwd()
while(basename(root) != "got_death_bracket") {
root <- dirname(root)
}
source(file.path(root, "data.R"))
#===========
# data read in
#===========
character_outcomes <- read_excel(file.path(dropbox, 'master.xlsx'))
list.files(dropbox)
dropbox
# Created by Michael Cahana in late Apr. 2019
# Scores GOT bracket predictions according to master bracket
#===========
# inputs:
#===========
# brackets dir
# master.xlsx
#===========
# needed libraries
#===========
library(tidyverse)
library(readxl)
#===========
# standard setup
#===========
root <- getwd()
while(basename(root) != "got_death_bracket") {
root <- dirname(root)
}
source(file.path(root, "data.R"))
#===========
# data read in
#===========
character_outcomes <- read_excel(file.path(dropbox, 'master.xlsx'))
bracket_predictions <-
list.files(brackets, full.names = T) %>%
.[!str_detect(., '~')] %>%
map_df(read_excel) %>%
filter(!is.na(Characters))
bracket_contestants <-
list.files(brackets) %>%
.[!str_detect(., '~')] %>%
str_replace('.xlsx', '') %>%
str_to_title()
character_outcomes <-
character_outcomes %>%
select(Characters:`Episode 6`) %>%
setNames(c('character', 'episode_3', 'episode_4',
'episode_5', 'episode_6')) %>%
gather(episode, outcome, episode_3:episode_6) %>%
mutate(episode = str_extract(episode, '\\d'))
bracket_predictions <-
bracket_predictions %>%
mutate(Characters = if_else(Characters=='Bron', 'Bronn', Characters)) %>%
select(Characters:`Episode 6`) %>%
setNames(c('character', 'episode_3', 'episode_4',
'episode_5', 'episode_6')) %>%
mutate(contestant = rep(bracket_contestants, each=32)) %>%
gather(episode, prediction, episode_3:episode_6) %>%
mutate(episode = str_extract(episode, '\\d'))
#===========
# generate scores
#===========
scores <-
bracket_predictions %>%
left_join(character_outcomes, by = c('character', 'episode')) %>%
filter(!is.na(outcome)) %>%
mutate(points = if_else(prediction==outcome, 1, 0)) %>%
group_by(contestant, episode) %>%
summarize(points = sum(points, na.rm = T)) %>%
mutate(cum_points = cumsum(points))
#===========
# save outout
#===========
write_csv(scores, file.path(results, 'scores.csv'))
render(file.path(root, 'site', 'index.Rmd'),
output_file = file.path(root, 'index.html'))
# Created by Michael Cahana in late Apr. 2019
# Visualize GOT bracket scores
#===========
# inputs:
#===========
# scores.csv
#===========
# needed libraries
#===========
library(tidyverse)
#===========
# standard setup
#===========
root <- getwd()
while(basename(root) != "got_death_bracket") {
root <- dirname(root)
}
source(file.path(root, "data.R"))
#===========
# data read in
#===========
scores <- read_csv(file.path(results, 'scores.csv'))
#===========
# leaderboard
#===========
leaderboard <-
scores %>%
group_by(contestant) %>%
summarize(points = sum(points)) %>%
arrange(desc(points)) %>%
setNames(c('Contestant', 'Points')) %>%
mutate(Position = row_number()) %>%
select(Position, Contestant, Points)
#===========
# time series
#===========
time_series <-
scores %>%
ggplot(aes(x = episode, y = cum_points, color = contestant)) +
geom_point() +
geom_line() +
labs(x = 'Episode', y = 'Points',
title = 'Week by Week Rankings',
color = 'Contestant') +
theme(plot.title = element_text(hjust = 0.5)) +
scale_x_continuous(breaks = seq(3, 6))
#===========
# save output
#===========
write_csv(leaderboard, file.path(results, 'leaderboard.csv'))
ggsave(file.path(results, 'time_series.png'), plot = time_series)
